$(document).ready(function (e) {
    $("#student_profile_update").on('submit',(function(e) {
        e.preventDefault();
        var formData = new FormData(this);
        $.ajax({
            url: "/student/profile/update",
            type: "POST",
            dataType: "json",
            data: formData,
            beforeSend: function(){ showNotify('Please wait !','warning','top-right');},
            contentType: false,
            processData:false,
            success: function(data) {
                if (data.status_is != 'Error'){
                    showNotify('Updated Successfully','success','top-right');
                    setTimeout(function(){location.reload()}, 2000);
                }
                else{
                    showNotify(data.error_message,'danger','top-right');
                }
            },
            error: function() {
                showNotify('Something went wrong!','danger','top-right');
            }
        });
    }));

    $('.validate_number').on('keypress', function (event) {
        if($(this).val().length>10){
            return false
        }
        
        return (event.charCode >= 48 && event.charCode <= 57) || (event.charCode == 13) || (event.charCode == 46)
    })
    
});

function vaccinated(status){
    if(status=='yes'){
        document.getElementById('covid_vac_upload').style.display = 'block';
        document.getElementById('vaccine_certificate').setAttribute("required", "True");
        document.getElementById('vaccine_certificate').style.display = 'block';
        document.getElementById('nadra_link_vac').style.display = 'none';
    }
    else {
        document.getElementById('vaccine_certificate').removeAttribute("required");
        document.getElementById('vaccine_certificate').style.display = 'none';
        document.getElementById('covid_vac_upload').style.display = 'none';
        document.getElementById('nadra_link_vac').style.display = 'block';
    }
}

function student_profileEdit(){
   //document.getElementsByClassName('profile_default_fields').style.display='none';

    def = document.getElementsByClassName('profile_default_fields');
    ed = document.getElementsByClassName('profile_edit_fields');
    for (i = 0; i < def.length; i++) {
        def[i].style.display = 'none';
    }
    for (i = 0; i < ed.length; i++) {
        ed[i].style.display = 'block';
    }
}

(function ($) {
    "use strict";
    var isIE = window.navigator.appName == 'Microsoft Internet Explorer';

    // FILEUPLOAD PUBLIC CLASS DEFINITION
    // =================================

var Fileinput = function (element, options) {
        this.$element = $(element);

        this.$input = this.$element.find(':file');
        if (this.$input.length === 0) return;

        this.name = this.$input.attr('name') || options.name;

        this.$hidden = this.$element.find('input[type=hidden][name="' + this.name + '"]');
        if (this.$hidden.length === 0) {
            this.$hidden = $('<input type="hidden">').insertBefore(this.$input)
        }

        this.$preview = this.$element.find('.fileinput-preview');
        var height = this.$preview.css('height');
        if (this.$preview.css('display') !== 'inline' && height !== '0px' && height !== 'none') {
            this.$preview.css('line-height', height)
        }

        this.original = {
            exists: this.$element.hasClass('fileinput-exists'),
            preview: this.$preview.html(),
            hiddenVal: this.$hidden.val()
        };

        this.listen()
    };

    Fileinput.prototype.listen = function() {
        this.$input.on('change.uk.fileinput', $.proxy(this.change, this));
        $(this.$input[0].form).on('reset.uk.fileinput', $.proxy(this.reset, this));

        this.$element.find('[data-trigger="fileinput"]').on('click.uk.fileinput', $.proxy(this.trigger, this));
        this.$element.find('[data-dismiss="fileinput"]').on('click.uk.fileinput', $.proxy(this.clear, this))
    };

    Fileinput.prototype.change = function(e) {
        var files = e.target.files === undefined ? (e.target && e.target.value ? [{ name: e.target.value.replace(/^.+\\/, '')}] : []) : e.target.files;

        e.stopPropagation();

        if (files.length === 0) {
            this.clear();
            this.$element.trigger('clear.uk.fileinput');
            return
        }

        this.$hidden.val('');
        this.$hidden.attr('name', '');
        this.$input.attr('name', this.name);

        var file = files[0];

        if (this.$preview.length > 0 && (typeof file.type !== "undefined" ? file.type.match(/^image\/(gif|png|jpeg)$/) : file.name.match(/\.(gif|png|jpe?g)$/i)) && typeof FileReader !== "undefined") {
            var reader = new FileReader();
            var preview = this.$preview;
            var element = this.$element;

            reader.onload = function(re) {
                var $img = $('<img>');
                $img[0].src = re.target.result;
                files[0].result = re.target.result;

                element.find('.fileinput-filename').text(file.name);

                // if parent has max-height, using `(max-)height: 100%` on child doesn't take padding and border into account
                if (preview.css('max-height') != 'none') $img.css('max-height', parseInt(preview.css('max-height'), 10) - parseInt(preview.css('padding-top'), 10) - parseInt(preview.css('padding-bottom'), 10)  - parseInt(preview.css('border-top'), 10) - parseInt(preview.css('border-bottom'), 10));

                preview.html($img);
                element.addClass('fileinput-exists').removeClass('fileinput-new');

                element.trigger('change.uk.fileinput', files)
            };

            reader.readAsDataURL(file)
        } else {
            this.$element.find('.fileinput-filename').text(file.name);
            this.$preview.text(file.name);

            this.$element.addClass('fileinput-exists').removeClass('fileinput-new');

            this.$element.trigger('change.uk.fileinput')
        }
    };

    Fileinput.prototype.clear = function(e) {
        if (e) e.preventDefault();

        this.$hidden.val('');
        this.$hidden.attr('name', this.name);
        this.$input.attr('name', '');

        //ie8+ doesn't support changing the value of input with type=file so clone instead
        if (isIE) {
            var inputClone = this.$input.clone(true);
            this.$input.after(inputClone);
            this.$input.remove();
            this.$input = inputClone;
        } else {
            this.$input.val('');
        }

        this.$preview.html('');
        this.$element.find('.fileinput-filename').text('');
        this.$element.addClass('fileinput-new').removeClass('fileinput-exists');

        if (e !== undefined) {
            this.$input.trigger('change');
            this.$element.trigger('clear.uk.fileinput');
        }
    };

    Fileinput.prototype.reset = function() {
        this.clear();

        this.$hidden.val(this.original.hiddenVal);
        this.$preview.html(this.original.preview);
        this.$element.find('.fileinput-filename').text('');

        if (this.original.exists) {
            this.$element.addClass('fileinput-exists').removeClass('fileinput-new')
        } else {
            this.$element.addClass('fileinput-new').removeClass('fileinput-exists')
        }

        this.$element.trigger('reset.uk.fileinput')
    };

    Fileinput.prototype.trigger = function(e) {
        this.$input.trigger('click');
        e.preventDefault()
    };

    // FILEUPLOAD PLUGIN DEFINITION
    // ===========================

    var old = $.fn.fileinput;

$.fn.fileinput = function (options) {
    return this.each(function () {
            var $this = $(this),
                data = $this.data('uk.fileinput');
            if (!data) $this.data('uk.fileinput', (data = new Fileinput(this, options)));
            if (typeof options == 'string') data[options]()
        })
    };

    $.fn.fileinput.Constructor = Fileinput;

    // FILEINPUT NO CONFLICT
    // ====================

$.fn.fileinput.noConflict = function () {
        $.fn.fileinput = old;
        return this
    };

    // FILEUPLOAD DATA-API
    // ==================

$(document).on('click.fileinput.data-api', '[data-provides="fileinput"]', function (e) {
        var $this = $(this);
        if ($this.data('uk.fileinput')) return;
        $this.fileinput($this.data());

        var $target = $(e.target).closest('[data-dismiss="fileinput"],[data-trigger="fileinput"]');
        if ($target.length > 0) {
            e.preventDefault();
            $target.trigger('click.uk.fileinput');
        }
    })

}(window.jQuery));
$(function() {
    // user edit
    altair_user_edit.init();
});

altair_user_edit = {
    init: function() {

        altair_user_edit.edit_form();
    },
    edit_form: function() {
        // form variables
        var $user_edit_form = $('#user_edit_form'),
            $user_edit_submit_btn = $('#user_edit_submit'),
            user_name = $('#user_edit_uname'),
            user_name_control= $('#user_edit_uname_control'),
            user_position = $('#user_edit_position'),
            user_position_control = $('#user_edit_position_control');

        user_name_control
            // insert user name into form input
            .val(user_name.text())
            // change user name on keyup
            .on('keyup',function() {
                user_name.text(user_name_control.val())
            });
        // update inputs
        altair_md.update_input(user_name_control);


        user_position_control
            // insert user position into form input
            .val(user_position.text())
            // change user position on keyup
            .on('keyup',function() {
                user_position.text(user_position_control.val())
            });
        // update inputs
        altair_md.update_input(user_position_control);

        // submit form
        $user_edit_submit_btn.on('click',function(e) {
            e.preventDefault();
            var form_serialized = JSON.stringify( $user_edit_form.serializeObject(), null, 2 );
            UIkit.modal.alert('<p>User data:</p><pre>' + form_serialized + '</pre>');
        })
    },
};
// Edit button enable
/*function onEdittable(id){

    //document.getElementById('nok_rec_input'+id).style.display = 'none';
    //document.getElementById('nok_rec_input'+id).style.display = 'block';
     $("#updatebutton_fms" ).removeClass("disabled");
    var a = document.getElementsByClassName('nok_rec'+id)
    var b = document.getElementsByClassName('nok_rec_input'+id)
    for(i = 0; i < a.length; i++) {
            a[i].style.display = 'none';
            b[i].style.display = 'block';
            }

}*/


// notify


// custom callback
function notify_callback() {
    return alert('Notify closed!');
}

function executeCallback(callback) {
    window[callback]();
}

function showNotify(message,status,pos) {
    thisNotify = UIkit.notify({
        message: message,
        status:status,
        timeout: 5000,
        group: null,
        pos: pos,
    });
    if(
        (
            ($window.width() < 768)
            && (
                (thisNotify.options.pos == 'bottom-right')
                || (thisNotify.options.pos == 'bottom-left')
                || (thisNotify.options.pos == 'bottom-center')
            )
        )
        || (thisNotify.options.pos == 'bottom-right')
    ) {
        var thisNotify_height = $(thisNotify.element).outerHeight();
        var spacer = $window.width() < 768 ? -6 : 8;
        $body.find('.md-fab-wrapper').css('margin-bottom',thisNotify_height + spacer);
    }
}
